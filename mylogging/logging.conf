[loggers]
keys=root,fileLogger,rotatingFileLogger
# 配置logger信息。必须包含一个名字叫做root的logger
# 当使用无参函数logging.getLogger()时，默认返回root这个logger
# 其他自定义logger可以通过 logging.getLogger("fileLogger") 方式进行调用
 
[handlers]
keys=consoleHandler,fileHandler,rotatingFileHandler
# 定义声明handlers信息。常用的handlers包括 :
# StreamHandler（仅将日志输出到kong控制台）
# FileHandler（将日志信息输出保存到文件）
# RotaRotatingFileHandler（将日志输出保存到文件中，并设置单个日志wenj文件的大小和日志文件个数）

 
[formatters]    # 设置日志格式
keys=simpleFormatter

# logger_xxx : 对loggers中声明的logger进行逐个配置，且要一一对应
[logger_root]
level=DEBUG
handlers=consoleHandler
 
[logger_fileLogger]
level=DEBUG
# 该logger中配置的handler
handlers=fileHandler
# logger 的名称
qualname=fileLogger
propagate=0
 
[logger_rotatingFileLogger]
level=DEBUG
# 这样配置，rotatingFileLogger中就同时配置了consoleHandler,rotatingFileHandler
# consoleHandler 负责将日志输出到控制台
# rotatingFileHandler 负责将日志输出保存到文件中
handlers=consoleHandler,rotatingFileHandler
qualname=rotatingFileLogger
propagate=0

# handler_xxx : 对handlers中声明的handler进行逐个配置，且要一一对应
[handler_consoleHandler]
class=StreamHandler
level=DEBUG
formatter=simpleFormatter
args=(sys.stdout,)
 
[handler_fileHandler]
class=FileHandler
level=DEBUG
formatter=simpleFormatter
args=('logging.log', 'a')
 
[handler_rotatingFileHandler]
class=handlers.RotatingFileHandler
level=WARNING
formatter=simpleFormatter
args=("rotating_logging.log", "a", 1*1024*1024, 5)
 
# formatter_xxx : 对声明的formatterjinx进行配置
[formatter_simpleFormatter]
#format=%(asctime)s - %(name)s - %(levelname)s - %(message)s
# format=%(asctime)s - %(module)s - %(thread)d - %(levelname)s : %(message)s
format=%(asctime)s - %(filename)s(%(lineno)d) - %(levelname)s - %(message)s
datefmt=%Y-%m-%d %H:%M:%S
